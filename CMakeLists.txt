cmake_minimum_required(VERSION 2.8.3)
project(beliefstate)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS roscpp roslib designator_integration designator_integration_msgs sensor_msgs cv_bridge roslib)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

set(CMAKE_CXX_FLAGS "-std=c++0x")
## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

#######################################
## Declare ROS messages and services ##
#######################################

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  designator_integration_msgs sensor_msgs
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
  CATKIN_DEPENDS roscpp roslib designator_integration designator_integration_msgs sensor_msgs cv_bridge
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  ${catkin_INCLUDE_DIRS}
  include)

## Declare a cpp library
add_library(bs_plugin_ros SHARED
  src/GlobalFunctions.cpp
  src/Plugin.cpp
  src/plugins/ros/PluginROS.cpp)

add_library(bs_plugin_gazebo SHARED
  src/GlobalFunctions.cpp
  src/Plugin.cpp
  src/plugins/gazebo/PluginGazebo.cpp)

add_library(bs_plugin_symboliclog SHARED
  src/GlobalFunctions.cpp
  src/Plugin.cpp
  src/Node.cpp
  src/plugins/symboliclog/PluginSymbolicLog.cpp)

add_library(bs_plugin_supervisor SHARED
  src/GlobalFunctions.cpp
  src/Plugin.cpp
  src/plugins/supervisor/PluginSupervisor.cpp)

add_library(bs_plugin_imagecapturer SHARED
  src/GlobalFunctions.cpp
  src/Plugin.cpp
  src/plugins/imagecapturer/CImageCapturer.cpp
  src/plugins/imagecapturer/PluginImageCapturer.cpp)

add_library(bs_plugin_owlexporter SHARED
  src/GlobalFunctions.cpp
  src/Plugin.cpp
  src/Node.cpp
  src/CExporter.cpp
  src/CExporterFileoutput.cpp
  src/plugins/owlexporter/CExporterOwl.cpp
  src/plugins/owlexporter/PluginOWLExporter.cpp)

## Declare a cpp executable
add_executable(beliefstate
  src/main.cpp
  src/GlobalFunctions.cpp
  src/PluginSystem.cpp
  src/PluginInstance.cpp
  src/Plugin.cpp
  src/Node.cpp
  src/Beliefstate.cpp)

## Add cmake target dependencies of the executable/library
## as an example, message headers may need to be generated before nodes
add_dependencies(bs_plugin_ros designator_integration_generate_messages_cpp)
add_dependencies(beliefstate designator_integration_generate_messages_cpp)

## Specify libraries to link a library or executable target against
target_link_libraries(beliefstate
  ${catkin_LIBRARIES}
  dl
  DesignatorIntegration
  config++
)

target_link_libraries(bs_plugin_ros
  ${catkin_LIBRARIES}
  DesignatorIntegration
)

target_link_libraries(bs_plugin_gazebo
  ${catkin_LIBRARIES}
)

target_link_libraries(bs_plugin_owlexporter
  ${catkin_LIBRARIES}
)

target_link_libraries(bs_plugin_imagecapturer
  ${catkin_LIBRARIES}
)

target_link_libraries(bs_plugin_supervisor
  ${catkin_LIBRARIES}
)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS beliefstate beliefstate_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_beliefstate.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
